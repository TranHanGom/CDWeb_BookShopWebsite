package com.cdweb.controller;



import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import com.cdweb.entity.Product;
import com.cdweb.model.Pager;
import com.cdweb.service.CategoryService;
import com.cdweb.service.ProductService;

@Controller
public class MainController {
	 private static final int INITIAL_PAGE = 0;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private CategoryService categoryService;
	
	
	
    @GetMapping("/")
    public String root(Model model ) {
    	 model.addAttribute("categories", categoryService.findAll());
         model.addAttribute("products", productService.findAll());
       
        
        return "index";
    }
   
//    @GetMapping("/list-product")
//    public String list(Model model ) {
//    	 model.addAttribute("categories", categoryService.findAll());
////    model.addAttribute("products", productService.findAll());
////        
//       
//        return "list-product";
//    }
    @RequestMapping(value = "/list-product/page/{page}")
    public String list(Model model,@PathVariable("page") int page ) {
    	 model.addAttribute("categories", categoryService.findAll());
    	 
        PageRequest pageable = PageRequest.of(page - 1, 6);
        Page<Product> articlePage = productService.findAllProductsPageable(pageable);
        int totalPages = articlePage.getTotalPages();
        if(totalPages > 0) {
            List<Integer> pageNumbers = IntStream.rangeClosed(1,totalPages).boxed().collect(Collectors.toList());
            model.addAttribute("pageNumbers", pageNumbers);
        }
        model.addAttribute("activeProductList", true);
        model.addAttribute("productList", articlePage.getContent());
       
        return "redirect:/list-product";
    }
    @GetMapping("/admin")
    public String admin(Model model ) {
    	
        
        return "index";
    }
    
   
   
   
   
}
