<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Reactive Quarkus: A Java Mutiny</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/c2rwWDwBazc/" /><category term="DevNation" /><category term="Event-Driven" /><category term="Java" /><category term="Microservices" /><category term="Quarkus" /><category term="Concurrency" /><category term="distributed systems" /><category term="non-blocking" /><category term="reactive applications" /><category term="reactive programming" /><author><name>Clement Escoffier</name></author><id>https://developers.redhat.com/blog/?p=762517</id><updated>2020-08-07T08:55:45Z</updated><published>2020-08-07T08:55:45Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about reactive &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/"&gt;Mutiny&lt;/a&gt; from &lt;a href="https://developers.redhat.com/blog/author/cescoffier/"&gt;Clement Escoffier&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/yanaga/"&gt;Edson Yanaga&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;First things first: How much confusion has been caused by the word &lt;em&gt;reactive&lt;/em&gt;? Are we talking about &lt;em&gt;reactive systems&lt;/em&gt;? &lt;em&gt;Reactive programming&lt;/em&gt;? &lt;em&gt;Reactive streams&lt;/em&gt;? Also, how many headaches have been caused by non-seasoned reactive developers trying to read reactive code?&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s make some sense out of this issue. In this talk, we introduce Mutiny, a new &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Reactive_programming"&gt;reactive programming&lt;/a&gt; library. After several years of observing developers using reactive APIs, we designed this library to be more &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt;, navigable, and to avoid the common pitfalls of reactive programming. This talk explores the reason behind Mutiny and how it simplifies the development of reactive applications. We also explain how Mutiny is integrated into Quarkus to build supersonic, subatomic, and reactive applications.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/kWlrGtwvOxg?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#38;linkname=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Freactive-quarkus-a-java-mutiny%2F&amp;#038;title=Reactive%20Quarkus%3A%20A%20Java%20Mutiny" data-a2a-url="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/" data-a2a-title="Reactive Quarkus: A Java Mutiny"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/"&gt;Reactive Quarkus: A Java Mutiny&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/c2rwWDwBazc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about reactive Quarkus and Mutiny from Clement Escoffier and Edson Yanaga. First things first: How much confusion has been caused by [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/"&gt;Reactive Quarkus: A Java Mutiny&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">762517</post-id><dc:creator>Clement Escoffier</dc:creator><dc:date>2020-08-07T08:55:45Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/07/reactive-quarkus-a-java-mutiny/</feedburner:origLink></entry><entry><title>A deep dive into Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o816JN06KYI/" /><category term="DevNation" /><category term="Linux" /><category term="Open source" /><category term="Security" /><category term="access management" /><category term="keycloak" /><category term="middleware" /><category term="OpenID" /><category term="openldap" /><author><name>Stian Thorgersen</name></author><id>https://developers.redhat.com/blog/?p=762337</id><updated>2020-08-07T07:01:53Z</updated><published>2020-08-07T07:01:53Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; from &lt;a href="https://developers.redhat.com/blog/author/stianth/"&gt;Stian Thorgersen&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Keycloak is an open source identity and access management solution for modern applications and services. You might already be familiar with it and are curious about its capabilities and features, but if you aren&amp;#8217;t, don&amp;#8217;t worry. In this video tutorial, we&amp;#8217;ll give you a great introduction to Keycloak and go through most of the capabilities and features that help you secure your applications and services. You&amp;#8217;ll discover how to easily enable two-factor authentication, integrate with external user stores like &lt;a target="_blank" rel="nofollow" href="https://www.openldap.org/"&gt;LDAP&lt;/a&gt;, delegate authentication to other identity providers, and use many more of the other cool and useful features Keycloak brings to the table.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/ZxpY_zZ52kU?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#38;linkname=A%20deep%20dive%20into%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F07%2Fa-deep-dive-into-keycloak%2F&amp;#038;title=A%20deep%20dive%20into%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/" data-a2a-title="A deep dive into Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;A deep dive into Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o816JN06KYI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about Keycloak from Stian Thorgersen and Burr Sutter. Keycloak is an open source identity and access management solution for modern applications [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;A deep dive into Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">762337</post-id><dc:creator>Stian Thorgersen</dc:creator><dc:date>2020-08-07T07:01:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/</feedburner:origLink></entry><entry><title>JGroups 5.0.0.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6cSfvDSRK2Y/jgroups-500final-released.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-jgroups_5_0_0_final_released</id><updated>2020-08-06T08:06:12Z</updated><published>2020-08-06T08:06:00Z</published><content type="html">&lt;div&gt;I'm happy to announce that JGroups 5.0.0.Final has been released!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new features are described in [1]. Below's a list of the major JIRAs:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2218"&gt;https://issues.redhat.com/browse/JGRP-2218&lt;/a&gt;: this is the most important change in 5.0.0: it changes Message into an interface and allows for different implementations of Message&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2450"&gt;https://issues.redhat.com/browse/JGRP-2450&lt;/a&gt;: support for virtual threads (fibers). If the JDK (probably 16 and higher) supports virtual threads, then they can be enabled by setting use_fibers to true in the transport. This will effectively bypass the thread pool(s) and use virtual threads instead. See [2] for details.&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2451"&gt;https://issues.redhat.com/browse/JGRP-2451&lt;/a&gt;: FD_ALL3 is a more efficient failure detection protocol; counts messages received from P as heartbeats, and P suppresses heartbeats when sending messages. This should reduce traffic on the network&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2462"&gt;https://issues.redhat.com/browse/JGRP-2462&lt;/a&gt;: implementation of Random Early Drop (RED) protocol, which starts dropping messages on the send side when the queue becomes full. This prevents message storms (by unneeded retransmission requests when messages are not received) and/or blocking&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2402"&gt;https://issues.redhat.com/browse/JGRP-2402&lt;/a&gt;: new protocol SOS to captures vital stats and dump them to a file periodically&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2401"&gt;https://issues.redhat.com/browse/JGRP-2401&lt;/a&gt;: versioned configuration. Stacks won't start if the versions of JGroups and the configuration differ (not for micro versions). This prevents use of old/outdated configurations with a newer JGroups release&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.redhat.com/browse/JGRP-2476"&gt;https://issues.redhat.com/browse/JGRP-2476&lt;/a&gt;: more efficient marshalling of classes. Reduces size of RPCs in RpcDispatcher&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;The documentation can be found at [3].&lt;/div&gt;&lt;div&gt;Enjoy!&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a href="http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html"&gt;http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] &lt;a href="http://belaban.blogspot.com/2020/07/double-your-performance-virtual-threads.html"&gt;http://belaban.blogspot.com/2020/07/double-your-performance-virtual-threads.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] &lt;a href="http://www.jgroups.org/manual5/index.html"&gt;http://www.jgroups.org/manual5/index.html&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6cSfvDSRK2Y" height="1" width="1" alt=""/&gt;</content><summary>I'm happy to announce that JGroups 5.0.0.Final has been released! The new features are described in [1]. Below's a list of the major JIRAs: https://issues.redhat.com/browse/JGRP-2218: this is the most important change in 5.0.0: it changes Message into an interface and allows for different implementations of Message https://issues.redhat.com/browse/JGRP-2450: support for virtual threads (fibers). I...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2020-08-06T08:06:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2020/08/jgroups-500final-released.html</feedburner:origLink></entry><entry><title>Monitoring .NET Core applications on Kubernetes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UwQZnMiqjfY/" /><category term=".NET" /><category term="Kubernetes" /><category term="Microservices" /><category term="Operator" /><category term="metrics .NET Core" /><category term="openshift" /><category term="prometheus .NET Core" /><category term="prometheus kubernetes" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=728067</id><updated>2020-08-05T07:00:32Z</updated><published>2020-08-05T07:00:32Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is an open source monitoring solution that collects metrics from the system and its applications. As a developer, you can query these metrics and use them to create alerts, which you can use as a source for dashboards. One example would be using Prometheus metrics with &lt;a target="_blank" rel="nofollow" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, I show you how to use Prometheus to monitor a &lt;a href="https://developers.redhat.com/topics/dotnet/"&gt;.NET Core&lt;/a&gt; application running on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. Note that installation instructions are not included with the article. I do include a reference for using the Prometheus &lt;a href="https://developers.redhat.com/topics/kubernetes/operators/"&gt;Operator&lt;/a&gt; to create and configure Prometheus on Kubernetes.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Learn more about Prometheus&amp;#8217; support for &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html#creating-alerting-rules_monitoring-your-own-services"&gt;monitoring Kubernetes and containerized applications&lt;/a&gt; deployed on OpenShift.&lt;/p&gt; &lt;h2&gt;Open source monitoring with Prometheus&lt;/h2&gt; &lt;p&gt;Prometheus organizes data in a &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Time_series"&gt;time series&lt;/a&gt;. This type of data graph is useful for tracking how a numeric value changes over time. Prometheus then uses the time series to track the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Counters&lt;/b&gt;: Values that can only increment, like the number of requests handled.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Gauges&lt;/b&gt;: Values that can go up and down, like memory used.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Histograms&lt;/b&gt;: Values that are counted in a number of buckets, like response time.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A single metric (like HTTP response time) corresponds to multiple time series that have a unique set of labels. Thanks to these labels, you can filter queries for specific criteria, such as the HTTP response time for a particular URL.&lt;/p&gt; &lt;h2&gt;Deploying Prometheus&lt;/h2&gt; &lt;p&gt;You can use the &lt;a target="_blank" rel="nofollow" href="https://github.com/coreos/prometheus-operator"&gt;Prometheus Operator&lt;/a&gt; to create and configure Prometheus on Kubernetes. To set up this example, I started by creating a project with a user that has monitoring permissions. I followed the steps described in &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html"&gt;&lt;i&gt;Monitoring your own services&lt;/i&gt;&lt;/a&gt; to create the project and user.&lt;/p&gt; &lt;h2&gt;Exposing metrics from .NET Core&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;a target="_blank" rel="nofollow" href="https://github.com/prometheus-net/prometheus-net"&gt;prometheus-net&lt;/a&gt; library to expose metrics from .NET Core. This library includes a package for monitoring .NET Core, and a separate package for monitoring ASP.NET Core. The ASP.NET Core monitoring package includes additional metrics related to the web server.&lt;/p&gt; &lt;p&gt;As described in the &lt;code&gt;prometheus-net&lt;/code&gt; &lt;a target="_blank" rel="nofollow" href="https://github.com/prometheus-net/prometheus-net"&gt;README&lt;/a&gt;, we need to include the &lt;code&gt;prometheus-net.AspNetCore&lt;/code&gt; package:&lt;/p&gt; &lt;pre&gt;&amp;#60;ItemGroup&amp;#62; &amp;#60;PackageReference Include="prometheus-net.AspNetCore" Version="3.5.0" /&amp;#62; &amp;#60;/ItemGroup&amp;#62; &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll add an endpoint that Prometheus will use to retrieve the metrics:&lt;/p&gt; &lt;pre&gt;app.UseEndpoints(endpoints =&amp;#62; { // ... endpoints.MapMetrics(); }; &lt;/pre&gt; &lt;p&gt;Finally, we enable capturing the HTTP metrics:&lt;/p&gt; &lt;pre&gt;public void Configure(IApplicationBuilder app, ...) { // ... app.UseRouting(); app.UseHttpMetrics(); // ... } &lt;/pre&gt; &lt;p&gt;We&amp;#8217;ll deploy this application on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, and make it accessible from outside the cluster:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet:3.1~https://github.com/redhat-developer/s2i-dotnetcore-ex#dotnetcore-3.1-monitor --context-dir app $ oc expose service s2i-dotnetcore-ex &lt;/pre&gt; &lt;p&gt;Now that our application is up and running, we can have a look at the HTTP endpoint that is used by Prometheus at the &lt;code&gt;/metrics&lt;/code&gt; path. Notice the different gauges, counters, and histograms exposed by the ASP.NET Core application:&lt;/p&gt; &lt;pre&gt;# HELP process_private_memory_bytes Process private memory size # TYPE process_private_memory_bytes gauge process_private_memory_bytes 383516672 # HELP process_working_set_bytes Process working set # TYPE process_working_set_bytes gauge process_working_set_bytes 229879808 # HELP http_requests_in_progress The number of requests currently in progress in the ASP.NET Core pipeline. One series without controller/action label values counts all in-progress requests, with separate series existing for each controller-action pair. # TYPE http_requests_in_progress gauge http_requests_in_progress{method="GET",controller="",action=""} 1 http_requests_in_progress{method="POST",controller="Home",action="Index"} 0 http_requests_in_progress{method="GET",controller="Home",action="Index"} 0 # HELP http_requests_received_total Provides the count of HTTP requests that have been processed by the ASP.NET Core pipeline. # TYPE http_requests_received_total counter http_requests_received_total{code="200",method="POST",controller="Home",action="Index"} 1 http_requests_received_total{code="200",method="GET",controller="Home",action="Index"} 1288 http_requests_received_total{code="200",method="GET",controller="",action=""} 4944 # HELP http_request_duration_seconds The duration of HTTP requests processed by an ASP.NET Core application. # TYPE http_request_duration_seconds histogram http_request_duration_seconds_sum{code="200",method="GET",controller="Home",action="Index"} 0.5861144999999994 http_request_duration_seconds_count{code="200",method="GET",controller="Home",action="Index"} 1288 http_request_duration_seconds_bucket{code="200",method="GET",controller="Home",action="Index",le="0.001"} 1262 ... http_request_duration_seconds_bucket{code="200",method="GET",controller="Home",action="Index",le="+Inf"} 1288 http_request_duration_seconds_sum{code="200",method="GET",controller="",action=""} 8.691159999999982 http_request_duration_seconds_count{code="200",method="GET",controller="",action=""} 4944 ... &lt;/pre&gt; &lt;p&gt;You can see metrics for memory like the &lt;code&gt;process_working_set_bytes&lt;/code&gt; gauge. You can also see &lt;code&gt;http_request_duration_seconds&lt;/code&gt; that exposes a histogram for the request duration. The &lt;code&gt;process_working_set_bytes&lt;/code&gt; metric has time series per &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;controller&lt;/code&gt;, and &lt;code&gt;action&lt;/code&gt;. This lets us filter based on those labels. The histogram data is in the &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric, which defines buckets using the &lt;code&gt;le&lt;/code&gt; (less or equal) label. The histogram also includes a &lt;code&gt;*_count&lt;/code&gt; and &lt;code&gt;*_sum&lt;/code&gt; metric.&lt;/p&gt; &lt;h2&gt;Monitoring the .NET application&lt;/h2&gt; &lt;p&gt;Now, we need to configure metrics collection for the .NET application. We do this on OpenShift by adding a &lt;code&gt;PodMonitor&lt;/code&gt; or &lt;code&gt;ServiceMonitor&lt;/code&gt; configuration to the namespace. The OpenShift Prometheus Operator picks up these resources and configures monitoring.&lt;/p&gt; &lt;p&gt;Next, let’s look at the service we’ve deployed. We&amp;#8217;ll use this information to configure the &lt;code&gt;ServiceMonitor&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc get service s2i-dotnetcore-ex -o yaml apiVersion: v1 kind: Service metadata: annotations: openshift.io/generated-by: OpenShiftNewApp creationTimestamp: 2020-05-08T11:48:02Z labels: app: s2i-dotnetcore-ex name: s2i-dotnetcore-ex namespace: demoproject resourceVersion: "22076" selfLink: /api/v1/namespaces/demoproject/services/s2i-dotnetcore-ex uid: 2aa94ebe-2384-4544-bcbe-b8283bd2db60 spec: clusterIP: 172.30.35.187 ports: - name: 8080-tcp port: 8080 protocol: TCP targetPort: 8080 selector: app: s2i-dotnetcore-ex deploymentconfig: s2i-dotnetcore-ex sessionAffinity: None type: ClusterIP status: loadBalancer: {} &lt;/pre&gt; &lt;h3&gt;Configure the ServiceMonitor&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll add a &lt;code&gt;ServiceMonitor&lt;/code&gt; that matches the &lt;code&gt;app: s2i-dotnetcore-ex&lt;/code&gt; label, &lt;code&gt;name: 8080-tcp&lt;/code&gt; port, and &lt;code&gt;namespace: demoproject&lt;/code&gt; namespace from the service configuration.&lt;/p&gt; &lt;p&gt;First, we create an &lt;code&gt;example-app-service-monitor.yaml&lt;/code&gt; file with the following content:&lt;/p&gt; &lt;pre&gt;apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: labels: k8s-app: prometheus-example-monitor name: prometheus-example-monitor namespace: demoproject spec: endpoints: - interval: 30s port: 8080-tcp scheme: http selector: matchLabels: app: s2i-dotnetcore-ex &lt;/pre&gt; &lt;p&gt;Note that the configuration includes the interval for monitoring, which in this case is set to &lt;code&gt;30s&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;All that&amp;#8217;s left to do is add the monitor:&lt;/p&gt; &lt;pre&gt;$ oc apply -f example-app-service-monitor.yaml &lt;/pre&gt; &lt;h2&gt;Querying Prometheus&lt;/h2&gt; &lt;p&gt;Now that Prometheus is monitoring our application, we can look at the metrics we&amp;#8217;ve collected. To start, open the OpenShift web user interface (UI) and go to the &lt;b&gt;Advanced &amp;#62; Metrics&lt;/b&gt; page. On this page, we can execute Prometheus queries. &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/prometheus/latest/querying/basics/"&gt;PromQL&lt;/a&gt; is the Prometheus Query Language and offers a simple, expressive language to query the time series that Prometheus collected.&lt;/p&gt; &lt;p&gt;As an example, we’ll use a query for calculating the 99% quantile response time of the .NET application service:&lt;/p&gt; &lt;pre&gt;histogram_quantile(0.99, sum by(le) (rate(http_request_duration_seconds_bucket[5m])))*1000 &lt;/pre&gt; &lt;p&gt;Figure 1 shows the response-time graph generated by Prometheus.&lt;/p&gt; &lt;div id="attachment_728097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png"&gt;&lt;img aria-describedby="caption-attachment-728097" class="wp-image-728097" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png" alt="A histogram graphs and display a .NET application service's 99% quantile response time." width="640" height="594" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot.png 724w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/prom_screenshot-300x278.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-728097" class="wp-caption-text"&gt;Figure 1: A histogram graphs a .NET application service&amp;#8217;s 99% quantile response time.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;PromQL queries&lt;/h3&gt; &lt;p&gt;In case you&amp;#8217;re not familiar with PromQL, let&amp;#8217;s dissect this query. We&amp;#8217;re using the &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric from the &lt;code&gt;http_request_duration_seconds&lt;/code&gt; histogram that we saw under the &lt;code&gt;/metrics&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Because these values are ever-incrementing counters, we apply the &lt;code&gt;rate&lt;/code&gt; operation over a five-minute window. This gives us the response-time change over the last five minutes. The &lt;code&gt;http_request_duration_seconds_bucket&lt;/code&gt; metric is split into a number of time series (per &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and so on). We don&amp;#8217;t care about these individual series, so we will sum them up. We add the &lt;code&gt;by (le)&lt;/code&gt; argument to maintain the separate buckets that make up the histogram. We use &lt;code&gt;histogram_quantile&lt;/code&gt; to obtain the 99% quantile value, and multiply by &lt;code&gt;1000&lt;/code&gt; to get the time in milliseconds.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you&amp;#8217;ve learned about using Prometheus to monitor .NET Core applications that are deployed on Kubernetes. If you wanted to continue with the example, you could use the metrics collected by Prometheus to &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/monitoring-your-own-services.html#creating-alerting-rules_monitoring-your-own-services"&gt;generate alerts&lt;/a&gt; and view them in one or more &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/visualization/grafana/"&gt;Grafana dashboards&lt;/a&gt;. If you&amp;#8217;re curious, check out OpenShift 4.3&amp;#8217;s support for &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/monitoring/cluster_monitoring/prometheus-alertmanager-and-grafana.html"&gt;accessing Prometheus, the Alerting UI, and Grafana&lt;/a&gt; via the web console.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#38;linkname=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F05%2Fmonitoring-net-core-applications-on-kubernetes%2F&amp;#038;title=Monitoring%20.NET%20Core%20applications%20on%20Kubernetes" data-a2a-url="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/" data-a2a-title="Monitoring .NET Core applications on Kubernetes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/"&gt;Monitoring .NET Core applications on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UwQZnMiqjfY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Prometheus is an open source monitoring solution that collects metrics from the system and its applications. As a developer, you can query these metrics and use them to create alerts, which you can use as a source for dashboards. One example would be using Prometheus metrics with Grafana. In this article, I show you how [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/"&gt;Monitoring .NET Core applications on Kubernetes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">728067</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-08-05T07:00:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/05/monitoring-net-core-applications-on-kubernetes/</feedburner:origLink></entry><entry><title>Voxxed Days Milan 2020 - cancelled, onwards to 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZYxkJVHIRUk/voxxed-days-milan-2020-cancelled.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-voxxed_days_milan_2020_cancelled_onwards_to_2021</id><updated>2020-08-05T07:47:05Z</updated><published>2020-08-05T05:00:00Z</published><content type="html">&lt;span style="background-color: white;"&gt;&lt;div class="separator" style="clear: both; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-align: left;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6TNNutcYkCM/Xypiv3eP9ZI/AAAAAAAAxVA/NBkJOndOlDwB-bsyvKkmfVXadCLxYXb8ACNcBGAsYHQ/s997/Screenshot%2B2020-08-05%2Bat%2B09.33.02.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="339" data-original-width="997" height="109" src="https://1.bp.blogspot.com/-6TNNutcYkCM/Xypiv3eP9ZI/AAAAAAAAxVA/NBkJOndOlDwB-bsyvKkmfVXadCLxYXb8ACNcBGAsYHQ/w320-h109/Screenshot%2B2020-08-05%2Bat%2B09.33.02.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Back in &lt;a href="https://www.schabell.org/2020/03/voxxed-days-milan-2020-5-questions-everyone-ignores-microservices-accepted.html" target="_blank"&gt;March I wrote an article&lt;/a&gt; about being accepted to speak at &lt;a href="https://voxxeddays.com/milan/" target="_blank"&gt;Voxxed Days Milano 2020&lt;/a&gt;, which should have been in May 2020.&amp;nbsp;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Then it got rescheduled to September 2002. Not really a surprise seeing as the world was pretty much on fire at the time with virus concerns and spreading across most countries in Europe.&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;font color="#444444" face="Arial, Tahoma, Helvetica, FreeSans, sans-serif"&gt;&lt;span style="font-size: 13px;"&gt;Now we are approaching the September event and many conferences have chosen to either go online and provide a virtual event or to cancel entirely.&lt;/span&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Today I got the message from the organization that they have decided to cancel the 2020 event and push all focus towards a 2021 event.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white;"&gt;&lt;font color="#444444" face="Arial, Tahoma, Helvetica, FreeSans, sans-serif"&gt;&lt;i&gt;&lt;div style="font-size: 13px;"&gt;&lt;b&gt;Subject: Voxxed Days Milano 2020 is cancelled&lt;/b&gt;&lt;/div&gt;&lt;div style="font-size: 13px;"&gt;It is with real sadness that we are announcing the cancellation of this year’s Voxxed Days Milano. Although the Covid-19 situation in Lombardy is improved a lot compared to few months ago, the numbers are still not going down as they should. People are worried and nobody can accurately predict how the situation will evolve in the next 2 months.&amp;nbsp;&lt;/div&gt;&lt;div style="font-size: 13px;"&gt;We are developers but we are humans after all, and we feel fear, doubt, discomfort and a whole range of heightened emotions. It is totally fine for us to have these feelings, and it would be wrong of us to ignore them. We cannot ask people to gather for an event which we cannot currently know will be safe for everyone. Therefore the organization of VDM20 (September edition) is cancelled.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-size: 13px;"&gt;This decision will hurt us financially but we think it is the right thing to do. We already received great messages of support and trust from our community that make us believe we will come back stronger as soon as possible. For now, we are targeting May 2021 as the next event date.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/i&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;This means my talk below will have to be resubmit, fingers crossed and maybe we can have a fun time talking about all things everyone is ignoring with microservices in 2021!&lt;/span&gt;&lt;/div&gt;&lt;div style="color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;I'm really looking forward to visiting this wonderful city full of history and vibrant life, but there is one thing that might be throwing a bit of a wrench in the works.&lt;/span&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;a name="more" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;/a&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;The talk that got accepted is an in depth look at the challenges that rise to the top of organizations implementing microservices.&lt;/span&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;5 Questions Everyone Ignores with Microservices&lt;/h3&gt;&lt;i style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. Funny enough, when discussing the development impact while transitioning to microservices, there are five questions that keep popping up. This session covers the questions that everyone should ask about microservices. Join us for an hour of power, where real life developer experiences are used to highlight the lessons we're all learning as we transition our integration infrastructure into modern day microservices.&lt;/i&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Hoping that the people of Milan remain safe and that we can get through to a successful Voxxed Days 2021.&lt;/span&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=wNMB1la1ixA:vaBSuvCa1wE:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=wNMB1la1ixA:vaBSuvCa1wE:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/wNMB1la1ixA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZYxkJVHIRUk" height="1" width="1" alt=""/&gt;</content><summary>Back in March I wrote an article about being accepted to speak at Voxxed Days Milano 2020, which should have been in May 2020.  Then it got rescheduled to September 2002. Not really a surprise seeing as the world was pretty much on fire at the time with virus concerns and spreading across most countries in Europe. Now we are approaching the September event and many conferences have chosen to eithe...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-08-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/wNMB1la1ixA/voxxed-days-milan-2020-cancelled.html</feedburner:origLink></entry><entry><title>HTTP-based Kafka messaging with Red Hat AMQ Streams</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eYchotbaV3M/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Microservices" /><category term="Stream Processing" /><category term="amq streams" /><category term="Apache Kafka" /><category term="log aggregation" /><category term="openshift" /><category term="Strimzi" /><author><name>Antonio Gagliardi</name></author><id>https://developers.redhat.com/blog/?p=720187</id><updated>2020-08-04T07:00:19Z</updated><published>2020-08-04T07:00:19Z</published><content type="html">&lt;p&gt;Apache Kafka is a rock-solid, super-fast, event streaming backbone that is not only for &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt;. It&amp;#8217;s an enabler for many use cases, including activity tracking, log aggregation, stream processing, change-data capture, &lt;a href="https://developers.redhat.com/blog/category/iot/"&gt;Internet of Things&lt;/a&gt; (IoT) telemetry, and more.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/amq-streams-datasheet"&gt;Red Hat AMQ Streams&lt;/a&gt; makes it easy to run and manage Kafka natively on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. AMQ Streams&amp;#8217; upstream project, &lt;a target="_blank" rel="nofollow" href="https://strimzi.io/"&gt;Strimzi&lt;/a&gt;, does the same thing for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Setting up a Kafka cluster on a developer&amp;#8217;s laptop is fast and easy, but in some environments, the client setup is harder. Kafka uses a TCP/IP-based proprietary protocol and has &lt;a target="_blank" rel="nofollow" href="https://cwiki.apache.org/confluence/display/KAFKA/Clients"&gt;clients&lt;/a&gt; available for many different programming languages. Only the JVM client is on Kafka&amp;#8217;s main codebase, however.&lt;/p&gt; &lt;p&gt;&lt;span id="more-720187"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In many scenarios, it is difficult, impossible, or we just don&amp;#8217;t want to put in the effort to install and set up a Kafka client manually. A hidden gem in AMQ Streams can be a big help to developers who want to access a Kafka client, but don&amp;#8217;t want the bother of setting one up. In this article, you will get started with &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.5/html/using_amq_streams_on_openshift/kafka-bridge-concepts-str"&gt;Red Hat AMQ Streams Kafka Bridge&lt;/a&gt;, a RESTful interface for producing and consuming Kafka topics using HTTP/1.1.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The Kafka HTTP bridge is available from &lt;a&gt;AMQ Streams 1.3&lt;/a&gt; and &lt;a&gt;Strimzi 0.12&lt;/a&gt; forward.&lt;/p&gt; &lt;p&gt;Figure 1 shows AMQ Streams Kafka Bridge in a typical Apache Kafka messaging system.&lt;/p&gt; &lt;div id="attachment_755417" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-755417" class="wp-image-755417 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-1024x683.png" alt="A diagram showing AMQ Streams Kafka Bridge in an Apache Kafka messaging system on Red Hat OpenShift." width="640" height="427" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-300x200.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/kafka-bridge-1-1024x683-768x512.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-755417" class="wp-caption-text"&gt;Figure 1: AMQ Streams Kafka Bridge in a typical Apache Kafka messaging system.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;!--more--&gt;&lt;/p&gt; &lt;h2&gt;Getting started with AMQ Streams Kafka Bridge&lt;/h2&gt; &lt;p&gt;To use AMQ Streams, you need an OpenShift cluster, 3.11 or newer, and a user with the cluster-admin role.&lt;/p&gt; &lt;p&gt;I tested the code for this article on a developer laptop with &lt;a&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7.6 and &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC) 1.9 on OpenShift 4.3.1. I suggest running CRC with at least 16GB of memory and eight cores, but it&amp;#8217;s up to you. (Just don&amp;#8217;t be too stingy; otherwise, you might have issues starting the Kafka cluster.)&lt;/p&gt; &lt;h3&gt;The five-minute installation&lt;/h3&gt; &lt;p&gt;First, we will install a Kafka custom resource definition (CRD) and role-based access control (RBAC) on a dedicated project named &lt;code&gt;kafka&lt;/code&gt;. Then, we&amp;#8217;ll install a Kafka cluster in the project, which we&amp;#8217;ll name &lt;code&gt;my-kafka-cluster&lt;/code&gt;.&lt;/p&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol&gt; &lt;li&gt;Download the AMQ Streams 1.4 &lt;a href="https://developers.redhat.com/download-manager/file/amq-streams-1.4.0-ocp-install-examples.zip"&gt;OpenShift Container Platform (OCP) installation and examples&lt;/a&gt;. Unzip the file and move it inside the folder &lt;code&gt;amq-streams-1.4.0-ocp-install-examples&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Log in to your cluster using the command &lt;code&gt;cluster-admin(CRC) oc login -u kubeadmin [...]&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Install the Cluster Operator into the &lt;code&gt;kafka&lt;/code&gt; project: &lt;pre&gt;$ sed -i 's/namespace: .*/namespace: kafka/' install/cluster-operator/*RoleBinding*.yaml $ oc new-project kafka $ oc project kafka $ oc apply -f install/cluster-operator/ &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Install the Topic and Entity Operators in a Kafka cluster project: &lt;pre&gt;$ oc new-project my-kafka-project $ oc set env deploy/strimzi-cluster-operator STRIMZI_NAMESPACE=kafka,my-kafka-project -n kafka $ oc apply -f install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml -n my-kafka-project $ oc apply -f install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml -n my-kafka-project $ oc apply -f install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml -n my-kafka-project $ oc apply -f install/strimzi-admin &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Create the Kafka cluster: &lt;pre&gt;$ oc project my-kafka-project $ cat &amp;#60;&amp;#60; EOF | $ oc create -f - apiVersion: kafka.strimzi.io/v1beta1 kind: Kafka metadata: name: my-cluster spec: kafka: replicas: 3 listeners: plain: {} tls: {} external: type: route storage: type: ephemeral zookeeper: replicas: 3 storage: type: ephemeral entityOperator: topicOperator: {} EOF &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Wait for the cluster to start: &lt;pre&gt;$ oc wait kafka/my-cluster --for=condition=Ready --timeout=300s -n my-kafka-project &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;That&amp;#8217;s it! The Kafka cluster is up and running.&lt;/p&gt; &lt;h3&gt;Install AMQ Streams Kafka Bridge&lt;/h3&gt; &lt;p&gt;Installing the Kafka HTTP bridge for AMQ Streams requires just one YAML file:&lt;/p&gt; &lt;pre&gt;$ oc apply -f examples/kafka-bridge/kafka-bridge.yaml &lt;/pre&gt; &lt;p&gt;Once you have installed the file, the Cluster Operator will create a deployment, a service, and a pod.&lt;/p&gt; &lt;h3&gt;Expose the bridge outside of OCP&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ve installed and configured the bridge, but we can only access it inside the cluster. Use the following command to expose it outside of OpenShift:&lt;/p&gt; &lt;pre&gt;$ oc expose service my-bridge-bridge-service&lt;/pre&gt; &lt;p&gt;The bridge itself doesn&amp;#8217;t provide any security, but we can secure it with other methods such as network policies, reverse proxy (OAuth), and Transport Layer Security (TLS) termination. If we want a more full-featured solution, we can use the bridge with a &lt;a&gt;3scale API Gateway&lt;/a&gt; that includes TLS authentication and authorization as well as metrics, rate limits, and billing.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The Kafka HTTP bridge supports TLS or Simple Authentication and Security Layer (SASL)-based authentication, and TLS-encrypted connections when connected to a Kafka cluster. It&amp;#8217;s also possible to install many bridges, choosing between internal or external implementations, each with different authentication mechanisms and different access control lists.&lt;/p&gt; &lt;h3&gt;Verify the installation&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s check to see whether the bridge is available:&lt;/p&gt; &lt;pre&gt;$ BRIDGE=$(oc get routes my-bridge-bridge-service -o=jsonpath='{.status.ingress[0].host}{"\n"}') curl -v $BRIDGE/healthy &lt;/pre&gt; &lt;p&gt;Note that the bridge exposes the REST API as OpenAPI-compatible:&lt;/p&gt; &lt;pre&gt;$ curl -X GET $BRIDGE/openapi&lt;/pre&gt; &lt;h2&gt;Using AMQ Streams Kafka Bridge&lt;/h2&gt; &lt;p&gt;At this point, everything is ready to produce and consume messages using the AMQ Streams Kafka Bridge. We&amp;#8217;ll go through a quick demonstration together.&lt;/p&gt; &lt;h3&gt;Produce and consume system logs&lt;/h3&gt; &lt;p&gt;Log ingestion is one of the common use cases for Kafka. We are going to fill a Kafka topic with our system logs, but they can come from any system that supports HTTP. Likewise, the logs can be consumed by other systems.&lt;/p&gt; &lt;p&gt;Start by creating a topic and naming it &lt;code&gt;machine-log-topic&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#60;&amp;#60; EOF | $ oc create -f - apiVersion: kafka.strimzi.io/v1beta1 kind: KafkaTopic metadata: name: machine-log-topic labels: strimzi.io/cluster: "my-cluster" spec: partitions: 3 replicas: 3 EOF &lt;/pre&gt; &lt;p&gt;Then, fill the topic with data using &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;jq&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ journalctl --since "5 minutes ago" -p "emerg".."err" -o json-pretty | \ jq --slurp '{records:[.[]|{"key":.__CURSOR,value: .}]}' - | \ curl -X POST $BRIDGE/topics/machine-log-topic -H 'content-type: application/vnd.kafka.json.v2+json' -d @- &lt;/pre&gt; &lt;p&gt;Usually, the content type is &lt;code&gt;application/vnd.kafka.json.v2+json&lt;/code&gt;, but it&amp;#8217;s also available as &lt;code&gt;application/vnd.kafka.binary.v2+json&lt;/code&gt; for the binary data format. A Base64 value is expected if you use the binary data format.&lt;/p&gt; &lt;h3&gt;Consuming messages&lt;/h3&gt; &lt;p&gt;Now we have messages to consume. Before we can consume from a topic, we have to add our consumer to a consumer group. Then, we must subscribe the consumer to the topic. In this example, we include the consumer &lt;code&gt;my-consumer&lt;/code&gt; in the consumer group &lt;code&gt;my-group&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ CONS_URL=$(curl -s -X POST $BRIDGE/consumers/my-group -H 'content-type: application/vnd.kafka.v2+json' \ -d '{ "name": "my-consumer", "format": "json", "auto.offset.reset": "earliest", "enable.auto.commit": true }' | \ jq .base_uri | \ sed 's/\"//g') &lt;/pre&gt; &lt;p&gt;Next, we subscribe it to the topic &lt;code&gt;my-topic&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ curl -v $CONS_URL/subscription -H 'content-type: application/vnd.kafka.v2+json' -d '{"topics": ["my-topic"]} &lt;/pre&gt; &lt;p&gt;And now we are ready to consume:&lt;/p&gt; &lt;pre&gt;$ curl -X GET $CONS_URL/records -H 'accept: application/vnd.kafka.json.v2+json' | jq &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Integrating old but good services or devices in a bleeding-edge microservice architecture can be challenging. But if you can live without hyperspeed messaging (which these older services provide), the Apache Kafka HTTP bridge allows those services—with just a little bit of HTTP/1.1—to leverage the power of the Apache Kafka.&lt;/p&gt; &lt;p&gt;The Apache Kafka HTTP bridge is easy to set up and integrate using its REST API, and it grants unlimited use as an HTTP transport. In this article, I&amp;#8217;ve shown you a quick installation procedure for deploying AMQ Streams Kafka Bridge on OCP, then demonstrated a producer-consumer messaging scenario using logging data over HTTP.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#38;linkname=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F04%2Fhttp-based-kafka-messaging-with-red-hat-amq-streams%2F&amp;#038;title=HTTP-based%20Kafka%20messaging%20with%20Red%20Hat%20AMQ%20Streams" data-a2a-url="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/" data-a2a-title="HTTP-based Kafka messaging with Red Hat AMQ Streams"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/"&gt;HTTP-based Kafka messaging with Red Hat AMQ Streams&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eYchotbaV3M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Kafka is a rock-solid, super-fast, event streaming backbone that is not only for microservices. It&amp;#8217;s an enabler for many use cases, including activity tracking, log aggregation, stream processing, change-data capture, Internet of Things (IoT) telemetry, and more. Red Hat AMQ Streams makes it easy to run and manage Kafka natively on Red Hat OpenShift. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/"&gt;HTTP-based Kafka messaging with Red Hat AMQ Streams&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">720187</post-id><dc:creator>Antonio Gagliardi</dc:creator><dc:date>2020-08-04T07:00:19Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/04/http-based-kafka-messaging-with-red-hat-amq-streams/</feedburner:origLink></entry><entry><title>Authorizing multi-language microservices with Louketo Proxy</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0Q-s-6VibSo/" /><category term="DevOps" /><category term="Linux" /><category term="Microservices" /><category term="Security" /><category term="deployment pattern" /><category term="keycloak" /><category term="Louketo Proxy" /><category term="man in the middle" /><category term="openid connect" /><category term="openshift" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=735167</id><updated>2020-08-03T07:00:09Z</updated><published>2020-08-03T07:00:09Z</published><content type="html">&lt;p&gt;What if you needed to provide authentication to several &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; that were written in different languages? You could use &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost"&gt;Red Hat Single Sign-On&lt;/a&gt; (SSO) to handle the authentication, but then you would still need to integrate each microservice with &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org"&gt;Keycloak&lt;/a&gt;. Wouldn&amp;#8217;t it be great if a service could just handle the authentication flow and pass the user&amp;#8217;s details directly to your microservices? In this article, I introduce a service that does just that!&lt;/p&gt; &lt;h2&gt;Louketo Proxy&lt;/h2&gt; &lt;p&gt;&lt;a href="https://github.com/louketo/louketo-proxy" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Louketo Proxy&lt;/a&gt; (previously Keycloak-Gatekeeper) integrates with &lt;a target="_blank" rel="nofollow" href="https://openid.net/connect/"&gt;OpenID Connect&lt;/a&gt; (OIDC)-compliant providers like Keycloak. Louketo Proxy hands off the authentication to Keycloak, and then passes the authorization and user details to a microservice as header attributes. The diagram in Figure 1 illustrates the authentication flow between Louketo Proxy, Keycloak, and a microservice.&lt;/p&gt; &lt;div id="attachment_735537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1.png"&gt;&lt;img aria-describedby="caption-attachment-735537" class="wp-image-735537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-1024x839.png" alt="A diagram of Louketo Proxy's authentication flow." width="640" height="524" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-1024x839.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-300x246.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1-768x629.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Auth-Sequence-1.png 1291w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735537" class="wp-caption-text"&gt;Figure 1: Louketo Proxy authenticates a microservice with Keycloak.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With Louketo Proxy, you don&amp;#8217;t need to worry about supporting the authentication flow across the different languages used for your microservices. As an added benefit, Louketo Proxy makes it easy to provide authentication to legacy off-the-shelf applications that do not support OIDC.&lt;/p&gt; &lt;h2&gt;Louketo Proxy in OpenShift&lt;/h2&gt; &lt;p&gt;Before getting started, it is worthwhile to explore the architecture that is required to run Louketo Proxy and a microservice together. In a &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; deployment, the usual pattern is for a single pod to run a single container, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_735347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod.png"&gt;&lt;img aria-describedby="caption-attachment-735347" class="wp-image-735347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-1024x521.png" alt="A diagram of an OpenShift deployment where one pod runs one container." width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod-768x391.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/single-pod.png 1519w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735347" class="wp-caption-text"&gt;Figure 2: A typical OpenShift deployment where one pod runs one container.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For our Louketo Proxy pattern to work, we need one pod to run two containers. Louketo Proxy and the microservice will reside within the same pod and share the resources associated with that pod, including networking. To prevent conflict, Louketo Proxy and the microservice will need to listen on different network ports. The Louketo Proxy instance also must be able to communicate with the microservice without traversing any network links. This setup reduces latency and makes it difficult to execute a man-in-the-middle (MITM) attack, which improves the security model. Figure 3 shows the OpenShift deployment pattern for Louketo Proxy with microservices.&lt;/p&gt; &lt;div id="attachment_735337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar.png"&gt;&lt;img aria-describedby="caption-attachment-735337" class="wp-image-735337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-1024x572.png" alt="A diagram of the OpenShift deployment with the Louketo Proxy instance and microservice running in the same pod." width="640" height="358" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-1024x572.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/sidecar-768x429.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735337" class="wp-caption-text"&gt;Figure 3: The Louketo Proxy instance and microservice run in the same pod and share the pod&amp;#8217;s resources.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Normally, we would create a service bound to the microservice and expose it via a route. In this case, we only create a service bound to the Louketo Proxy instance and expose it via a route. Consumers will only ever access the microservice via the Louketo Proxy instance. This arrangement enforces the security model.&lt;/p&gt; &lt;h2&gt;Getting started with Louketo Proxy&lt;/h2&gt; &lt;p&gt;For this example, we deploy a simple &lt;a target="_blank" rel="nofollow" href="https://palletsprojects.com/p/flask/"&gt;Flask application&lt;/a&gt; that exposes the authentication headers passed along by Louketo Proxy. If you wish, you can run the example code on &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC). Otherwise, you will need to update the code to run on your OpenShift cluster.&lt;/p&gt; &lt;h3&gt;Step 1: Deploy Keycloak&lt;/h3&gt; &lt;p&gt;The first step is to deploy Keycloak on CodeReady Containers. To fast-track the process, run the following commands from a terminal. These will create a project on OpenShift, deploy Keycloak, and create a route:&lt;/p&gt; &lt;pre&gt;$ oc new-project sso-test $ oc new-app --name sso --docker-image=quay.io/keycloak/keycloak -e KEYCLOAK_USER='admin' -e KEYCLOAK_PASSWORD='louketo-demo' -e PROXY_ADDRESS_FORWARDING='true’ $ oc create route edge --service=sso --hostname=sso.apps-crc.testing &lt;/pre&gt; &lt;h3&gt;Create and configure the Flask client&lt;/h3&gt; &lt;p&gt;Browse to &lt;b&gt;https://sso.apps-crc.testing&lt;/b&gt; and log in with the username &lt;code&gt;admin&lt;/code&gt; and the password &lt;code&gt;louketo-demo&lt;/code&gt;. Once there, select&lt;strong&gt; Clients&lt;/strong&gt; from the left-hand menu and create a new client with the fields shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_735277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png"&gt;&lt;img aria-describedby="caption-attachment-735277" class="wp-image-735277" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png" alt="A screenshot of the Add Client dialog." width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client.png 734w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/add-client-300x121.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735277" class="wp-caption-text"&gt;Figure 4: Add a new Flask client.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After you have created the client, you will have the option to switch the client access type from public to confidential, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_735327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png"&gt;&lt;img aria-describedby="caption-attachment-735327" class="wp-image-735327" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png" alt="A screenshot of the Settings dialog in the Flask UI." width="640" height="581" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential.png 582w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/select-confidential-300x272.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735327" class="wp-caption-text"&gt;Figure 5: Use the Settings dialog to switch client access to confidential.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;CodeReady Containers will generate a client secret, which you can view under the &lt;strong&gt;Credentials&lt;/strong&gt; tab shown in Figure 6. You will need the secret when we configure Louketo Proxy, so make a note of it.&lt;/p&gt; &lt;div id="attachment_735317" style="width: 514px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png"&gt;&lt;img aria-describedby="caption-attachment-735317" class="wp-image-735317 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png" alt="A screenshot of the Credentials dialog in the Flask UI." width="504" height="231" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/secret-300x138.png 300w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735317" class="wp-caption-text"&gt;Figure 6: Check under the Credentials tab to see the generated client secret.&lt;/p&gt;&lt;/div&gt; &lt;h4&gt;Configure the mappers&lt;/h4&gt; &lt;p&gt;At this point, we are still configuring the Flask client. Select the &lt;strong&gt;Mappers&lt;/strong&gt; tab and add two mappers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Groups&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Name: groups&lt;/li&gt; &lt;li&gt;Mapper type: Group Membership&lt;/li&gt; &lt;li&gt;Token claim name: groups&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;b&gt;Audience&lt;/b&gt;: &lt;ul&gt; &lt;li&gt;Name: audience&lt;/li&gt; &lt;li&gt;Mapper type: Audience&lt;/li&gt; &lt;li&gt;Included client audience: flask&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 7 shows the configuration for the Audience mapper.&lt;/p&gt; &lt;div id="attachment_735627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience.png"&gt;&lt;img aria-describedby="caption-attachment-735627" class="wp-image-735627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-1024x475.png" alt="A screenshot of the dialog to create the Audience mapper." width="640" height="297" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-1024x475.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-audience-768x356.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735627" class="wp-caption-text"&gt;Figure 7: Configure the Flask client&amp;#8217;s Audience mapper.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 8 shows the configuration for the Groups mapper.&lt;/p&gt; &lt;div id="attachment_735637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups.png"&gt;&lt;img aria-describedby="caption-attachment-735637" class="wp-image-735637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-1024x519.png" alt="A screenshot of the dialog to create the Groups mapper." width="640" height="324" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-1024x519.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/protocol-mappers-groups-768x389.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735637" class="wp-caption-text"&gt;Figure 8: Configure the Flask client&amp;#8217;s group-membership mapper.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure the user groups&lt;/h3&gt; &lt;p&gt;Now select &lt;b&gt;Groups&lt;/b&gt; from the left-hand menu and add two groups:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;basic_user&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Configure the user&lt;/h3&gt; &lt;p&gt;Again from the left-hand menu, select &lt;b&gt;Users&lt;/b&gt; and add a user. Be sure to enter an email and set a password for the user, then add the user to the &lt;code&gt;basic_user&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; groups that you just created. Next, we&amp;#8217;ll configure Louketo Proxy and the example application.&lt;/p&gt; &lt;h2&gt;Step 2: Configure Louketo Proxy and the application&lt;/h2&gt; &lt;p&gt;We will need the following details from our Keycloak server (note that you will enter the client secret that you saved in Step 1):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Client ID: flask&lt;/li&gt; &lt;li&gt;Client secret&lt;/li&gt; &lt;li&gt;Discovery URL: https://sso.apps-crc.testing/auth/realms/master&lt;/li&gt; &lt;li&gt;Groups: basic_user&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Create the ConfigMaps&lt;/h3&gt; &lt;p&gt;First, we&amp;#8217;ll use a ConfigMap to configure Louketo Proxy. Louketo Proxy supports presenting custom pages (sign-in pages, forbidden pages, and so on) that can match the look-and-feel of the associated microservice. For our use case, we will redirect all unauthenticated requests to Keycloak. Make sure that you replace the &lt;code&gt;client-secret&lt;/code&gt; in the following ConfigMap with the one generated by Keycloak:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: ConfigMap metadata: name: gatekeeper-config data: keycloak-gatekeeper.conf: |+ # The URL for retrieving the OpenID configuration - normally the /auth/realms/ discovery-url: https://sso.apps-crc.testing/auth/realms/master # skip tls verify skip-openid-provider-tls-verify: true # the client ID for the 'client' application client-id: flask # the secret associated with the 'client' application client-secret: &amp;#60; Paste Client Secret here &amp;#62; # the interface definition you wish the proxy to listen to, all interfaces are specified as ':', unix sockets as unix://| listen: :3000 # whether to enable refresh-tokens enable-refresh-tokens: true # the location of a certificate you wish the proxy to use for TLS support tls-cert: # the location of a private key for TLS tls-private-key: # the redirection URL, essentially the site url, note: /oauth/callback is added at the end redirection-url: https://flask.apps-crc.testing secure-cookie: false # the encryption key used to encode the session state encryption-key: nkOfcT6jYCsXFuV5YRkt3OvY9dy1c0ck # the upstream endpoint which we should proxy request upstream-url: http://127.0.0.1:8080/ resources: - uri: /* groups: - basic_user &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll create a ConfigMap for the Flask application. Before we can create the ConfigMap, we need to obtain the public key for Keycloak. To get the public key, log in to the Keycloak admin page and go to&lt;b&gt; Realm Settings &amp;#62; Keys&lt;/b&gt;. From there, select the &lt;b&gt;RS256 public key&lt;/b&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_735307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key.png"&gt;&lt;img aria-describedby="caption-attachment-735307" class="wp-image-735307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-1024x287.png" alt="A screenshot of the option to select the RSA-generated public key." width="640" height="179" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-1024x287.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-300x84.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key-768x215.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/public-key.png 1041w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735307" class="wp-caption-text"&gt;Figure 9: Select the RSA-generated public key.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The Flask application uses this public key to check the validity of the JSON Web Token (JWT) that Louketo Proxy passes. Here is the ConfigMap for the Flask application:&lt;/p&gt; &lt;pre&gt;kind: ConfigMap apiVersion: v1 metadata: name: sso-public-key data: PUBLIC_KEY: | -----BEGIN PUBLIC KEY----- &amp;#60; Paste in the Keycloak public key here &amp;#62; -----END PUBLIC KEY----- &lt;/pre&gt; &lt;h3&gt;Bind the service&lt;/h3&gt; &lt;p&gt;Now we need to bind a service to the Louketo Proxy listening port. We defined the listening port in Louketo Proxy&amp;#8217;s ConfigMap under the &lt;code&gt;listen&lt;/code&gt; parameter. Here is the service binding:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Service metadata: name: flask spec: ports: - port: 3000 protocol: TCP targetPort: 3000 selector: app: flask &lt;/pre&gt; &lt;h3&gt;Configure the route&lt;/h3&gt; &lt;p&gt;We use routes to expose our services to consumers. In this case, we are exposing the Louketo Proxy service and the terminating TLS on the router:&lt;/p&gt; &lt;pre&gt;kind: Route apiVersion: route.openshift.io/v1 metadata: name: flask spec: host: flask.apps-crc.testing to: kind: Service name: flask weight: 100 port: targetPort: 3000 tls: termination: edge insecureEdgeTerminationPolicy: Redirect wildcardPolicy: None &lt;/pre&gt; &lt;h3&gt;Apply the DeploymentConfig&lt;/h3&gt; &lt;p&gt;Now that we have created the ConfigMaps, service, and route we can apply our OpenShift DeploymentConfig. If you look carefully at the configuration below, you will see that we are deploying two containers within the same DeploymentConfig. As I said at the beginning of this article, our architecture calls for deploying two containers within the same pod:&lt;/p&gt; &lt;pre&gt;kind: DeploymentConfig apiVersion: apps.openshift.io/v1 metadata: name: flask labels: app: flask spec: strategy: type: Rolling replicas: 1 selector: app: flask template: metadata: labels: app: flask spec: containers: - name: flask image: quay.io/rarm_sa/flask-sso-gatekeeper ports: - containerPort: 8080 protocol: TCP envFrom: - configMapRef: name: sso-public-key imagePullPolicy: IfNotPresent - name: gatekeeper image: 'quay.io/louketo/louketo-proxy' args: - --config=/etc/keycloak-gatekeeper.conf ports: - containerPort: 3000 name: gatekeeper volumeMounts: - name: gatekeeper-config mountPath: /etc/keycloak-gatekeeper.conf subPath: keycloak-gatekeeper.conf volumes: - name : gatekeeper-config configMap: name: gatekeeper-config &lt;/pre&gt; &lt;h2&gt;Test the configuration&lt;/h2&gt; &lt;p&gt;To test your configuration, browse to the example application at &lt;b&gt;https://flask.apps-crc.testing&lt;/b&gt;. You will be redirected to Keycloak and presented with a login screen like the one in Figure 10. Enter the username and password for your application user.&lt;/p&gt; &lt;div id="attachment_735287" style="width: 566px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png"&gt;&lt;img aria-describedby="caption-attachment-735287" class="wp-image-735287 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png" alt="A screenshot of the Keycloak login screen." width="556" height="501" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/login.png 556w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/login-300x270.png 300w" sizes="(max-width: 556px) 100vw, 556px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735287" class="wp-caption-text"&gt;Figure 10: The Keycloak login screen.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you have authenticated the user, you will be redirected to an application page that returns a JSON file. The file exposes the headers passed along by Louketo Proxy, as shown in Figure 11.&lt;/p&gt; &lt;div id="attachment_735587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask.png"&gt;&lt;img aria-describedby="caption-attachment-735587" class="wp-image-735587 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-1024x720.png" alt="A screenshot of the JSON file." width="640" height="450" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-1024x720.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-300x211.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/flask-768x540.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-735587" class="wp-caption-text"&gt;Figure 11: The Flask application returns a JSON file that exposes the Louketo Proxy headers.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article introduced you to Louketo Proxy, a simple way to provide authentication for your applications without having to code your own OpenID Connect clients within your microservices. As always, I welcome your questions and feedback in the comments.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#38;linkname=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F03%2Fauthorizing-multi-language-microservices-with-louketo-proxy%2F&amp;#038;title=Authorizing%20multi-language%20microservices%20with%20Louketo%20Proxy" data-a2a-url="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/" data-a2a-title="Authorizing multi-language microservices with Louketo Proxy"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/"&gt;Authorizing multi-language microservices with Louketo Proxy&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0Q-s-6VibSo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;What if you needed to provide authentication to several microservices that were written in different languages? You could use Red Hat Single Sign-On (SSO) to handle the authentication, but then you would still need to integrate each microservice with Keycloak. Wouldn&amp;#8217;t it be great if a service could just handle the authentication flow and pass [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/"&gt;Authorizing multi-language microservices with Louketo Proxy&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">735167</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2020-08-03T07:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/03/authorizing-multi-language-microservices-with-louketo-proxy/</feedburner:origLink></entry><entry><title>Choosing Between ActiveMQ and Kafka for Messaging Infrastructure</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0PBeDxtQ8uw/choosing-between-activemq-and-kafka-for.html" /><category term="activemq" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-choosing_between_activemq_and_kafka_for_messaging_infrastructure</id><updated>2020-07-31T14:56:39Z</updated><published>2020-07-31T14:56:00Z</published><content type="html">&lt;div&gt;The term asynchronous means “not occurring at the same time” and in the context of distributed systems and messaging it implies that the processing of a request occurs at an arbitrary point in time. There are many advantages of asynchronous interactions over synchronous ones but also new challenges introduced by it. In this post, we will focus on a few specific considerations for choosing a suitable asynchronous messaging infrastructure for implementing &lt;a href="https://developers.redhat.com/topics/event-driven/" target="_blank"&gt;event-driven&lt;/a&gt; systems. Let’s see a few of the subtle differences between asynchronous interaction styles.&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Message Business Value&lt;/h2&gt;Not all messages are created equal. Some are valid and valuable only for a short period of time and obsolete later. Some are valuable until they are consumed regardless of the time passed. And some messages are valid and useful for repeated consumption. Considering the validity and the value of messages relative to time and consumption rate, we can qualify interaction styles between services into the following categories:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-p9AE1uCT-lY/XyQrM2kw2LI/AAAAAAAAOi8/9VSsF63jc_0u3NSab9nn5nYwCtS4fce_QCLcBGAsYHQ/s2576/business_value.png"&gt;&lt;img alt="Message types by business value" border="0" height="136" src="https://1.bp.blogspot.com/-p9AE1uCT-lY/XyQrM2kw2LI/AAAAAAAAOi8/9VSsF63jc_0u3NSab9nn5nYwCtS4fce_QCLcBGAsYHQ/d/business_value.png" title="Message types by business value" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;Message types by business value&lt;/i&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Volatile&lt;/h4&gt;These are ephemeral messages where the value is time-bound. Valuable now, but not in the short future. There is no point in storing events that are useless in the future and using messaging systems with such characteristics gives the best performance with the lowest latency possible as the disk is skipped. In such a scenario, the system is aware of the connected consumers and the event disseminated to all consumers online at the time of publication. If a consumer is disconnected, the messaging system forgets about these consumers. What is important in such a system is the ability to handle a large number of dynamic clients with low latency interaction needs such as IoT devices.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Durable&lt;/h4&gt;However, in some situations you want the messaging system to be aware of the consumers and store the messages while the consumer is not available. That is a traditional message broker which will hold on to the messages for the consumers that he knows about and allow the consumers to re-connect and consume the events that were produced in his absence. Once an event is consumed by all the interested parties, it will discard the messages. Here the broker knows about registered consumers and messages are stored durably until read by all registered consumers. Here the goal is to do reliable messaging among services with strong ordering and delivery guarantees.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Replayable&lt;/h4&gt;Here, the messaging system is not aware of the consumers that are interested in the event. It simply stores the events published to a stream for some time or until capacity is reached. Then a consumer can come along at any time, connect and consume the events and perhaps replay the stream from the beginning. Consumers can move back and forth in the stream as required and replay the messages repeatedly. Here, the driving force is extreme scalability combined with the ability to replay messages for existing or new consumers.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Message Semantics&lt;/h2&gt;Apart from the technical characteristics of the messages, it is important to distinguish the language we use, the semantic aspects, and the intent of the interactions. Some messages are targeted for a specific consumer and demand concrete actions. Some are querying the latest state of a system without requiring a state change. And some notify the world about a change that has happened in the source system. From a messaging semantic perspective, there are the following types of messages:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-RMxJzN21Bbk/XyQrihOt9FI/AAAAAAAAOjE/3jg_mU4oqN0WB1G8OOqQ43FC2JNmt5yMACLcBGAsYHQ/s2568/Screenshot%2B2020-07-28%2Bat%2B07.39.01.png"&gt;&lt;img alt="Message types by semantics" border="0" height="135" src="https://1.bp.blogspot.com/-RMxJzN21Bbk/XyQrihOt9FI/AAAAAAAAOjE/3jg_mU4oqN0WB1G8OOqQ43FC2JNmt5yMACLcBGAsYHQ/d/Screenshot%2B2020-07-28%2Bat%2B07.39.01.png" title="Message types by semantics" width="400" /&gt;&lt;/a&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Message types by semantics&lt;/i&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;h4&gt;Command&lt;/h4&gt;A command is a request for action that usually leads to a state change on a known target system. Typically there is a response indicating that action was completed and even there might be a result associated with it. When a response is expected, commands are typically implemented over synchronous protocols such as HTTP, but it is possible to implement request/response or fire and forget style commands over asynchronous messaging systems. With a command based asynchronous messages, there is some coupling between the source and the target systems in the form of command semantics.&lt;br /&gt;&lt;h4&gt;Query&lt;/h4&gt;A query is like a command, but it is a read-only interaction that does not lead to a state change. By its very nature, a query expects a response, and it is common to see synchronous implementations here. But asynchronous and non-blocking implementations over messaging systems and even fire and forget style interactions for long-running operations where a response is written to a different location are common too.&lt;br /&gt;&lt;h4&gt;Event&lt;/h4&gt;An event is a notification that something has changed. A system sends event notifications to notify other systems for a change in its domain. An event is different from a command in that often the event emitting system doesn’t expect an answer at all. In addition to being asynchronous, event messages are not targeted to a specific recipient and thus, they enable even further decoupling. Similar to other asynchronous interactions, events are implemented as messages on queues, which are often called streams. Martin Fowler covers in-depth the different types of events in &lt;a href="https://www.youtube.com/watch?v=STKCRSUsyP0" target="_blank"&gt;this&lt;/a&gt; talk.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Summary&lt;/h2&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;One approach you can take is to follow the &lt;a href="https://en.wikipedia.org/wiki/Law_of_the_instrument" target="_blank"&gt;Law of the Instrument&lt;/a&gt; approach defined by Maslow as “If the only tool you have is a hammer, treat everything as if it were a nail." You could certainly use a classic message broker such as Apache ActiveMQ to implement the different interaction styles. It would be a familiar technology to many and easier to start with, but hard to implement some use cases such as replayable messaging. Or you could take the other extreme and try to use Apache Kafka for everything. It would require a larger amount of hardware resources and human effort to manage it, but it would cover the replayable messaging and extreme scalability needs. While both of the above approaches are fine to start with, when you have a large number of services with different messaging needs, using the right tool for the right job is a better option. We can map the above-described messaging patterns to see what messaging infrastructure is best suited for each.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-MTuOiuBjh48/XyQr8TVfwuI/AAAAAAAAOjQ/JwY1yhgOkGY8l-upOVl2vqR9kvYdXh9tQCLcBGAsYHQ/s2768/Screenshot%2B2020-07-28%2Bat%2B07.39.17.png"&gt;&lt;img alt="Mapping messaging subtleties to different messaging infrastructures" border="0" height="135" src="https://1.bp.blogspot.com/-MTuOiuBjh48/XyQr8TVfwuI/AAAAAAAAOjQ/JwY1yhgOkGY8l-upOVl2vqR9kvYdXh9tQCLcBGAsYHQ/d/Screenshot%2B2020-07-28%2Bat%2B07.39.17.png" title="Mapping messaging subtleties to different messaging infrastructures" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;i&gt;Mapping messaging subtleties to different messaging infrastructures&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;We at Red Hat love any open source technology. That is why we included Apache Qpid, Apache ActiveMQ Artemis, and Apache Kafka in our &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/amq" target="_blank"&gt;Red Hat AMQ&lt;/a&gt; product and let the customer choose the right tool for the right job. There are many other aspects to consider when choosing the right tool, I hope this post will help you get there one step closer.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;i&gt;This post was originally published on Red Hat Developers. To read the original post, check &lt;a href="https://developers.redhat.com/blog/2020/07/31/choosing-the-right-asynchronous-messaging-infrastructure-for-the-job/" target="_blank"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0PBeDxtQ8uw" height="1" width="1" alt=""/&gt;</content><summary>The term asynchronous means “not occurring at the same time” and in the context of distributed systems and messaging it implies that the processing of a request occurs at an arbitrary point in time. There are many advantages of asynchronous interactions over synchronous ones but also new challenges introduced by it. In this post, we will focus on a few specific considerations for choosing a suitab...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-07-31T14:56:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2020/07/choosing-between-activemq-and-kafka-for.html</feedburner:origLink></entry><entry><title>Choosing the right asynchronous-messaging infrastructure for the job</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HrNVtP7wbRg/" /><category term="Event-Driven" /><category term="Java" /><category term="Microservices" /><category term="Stream Processing" /><category term="asynchronous messaging" /><category term="fire and forget" /><category term="kafka microservices" /><category term="red hat amq" /><category term="request and response" /><author><name>Bilgin Ibryam</name></author><id>https://developers.redhat.com/blog/?p=732387</id><updated>2020-07-31T07:00:07Z</updated><published>2020-07-31T07:00:07Z</published><content type="html">&lt;p&gt;The term &lt;i&gt;asynchronous&lt;/i&gt; means &amp;#8220;not occurring at the same time.&amp;#8221; In the context of distributed systems and messaging, this term implies that request processing will occur at an arbitrary point in time. Asynchronous interactions hold many advantages over synchronous ones, but they also introduce new challenges. In this article, we will focus on specific considerations for choosing the asynchronous-messaging infrastructure for your &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt; systems.&lt;/p&gt; &lt;p&gt;We will start by looking at the subtle differences between asynchronous interaction styles based on the business value and semantic type of the messages being delivered. Considering these differences helps us to identify messaging patterns, which we can use to determine the kind of messaging system that we need.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: At Red Hat, we love any open source technology, so I use three open source messaging frameworks—&lt;a target="_blank" rel="nofollow" href="https://qpid.apache.org"&gt;Apache Qpid&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://activemq.apache.org/components/artemis/"&gt;Apache ActiveMQ Artemis&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org"&gt;Apache Kafka&lt;/a&gt;—for my examples. &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ&lt;/a&gt; is our flexible messaging platform that includes all three frameworks, making it easy to choose the right tool for your needs.&lt;/p&gt; &lt;h2&gt;The business value of different message types&lt;/h2&gt; &lt;p&gt;Not all messages are created equal. Some are valid and valuable only for a short period and become obsolete later. Some are valuable until they are consumed, regardless of how much time has passed. And some messages are valid and useful for repeated consumption. By considering the validity and value of messages relative to time and consumption rate, we can qualify interaction styles between services into three categories, as described in Figure 1.&lt;/p&gt; &lt;div id="attachment_758707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-758707" class=" size-large wp-image-758707 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/07/business_value-1024x349.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/business_value-1024x349.png" alt="Figure 1: Understanding the business value of different message types." width="640" height="218" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/business_value-1024x349.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/business_value-300x102.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/business_value-768x262.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-758707" class="wp-caption-text"&gt;Figure 1: Understanding the business value of different message types.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s consider each of these categories.&lt;/p&gt; &lt;h3&gt;Volatile&lt;/h3&gt; &lt;p&gt;Messages in a volatile messaging system are ephemeral, and the value of the message is time-bound: They are valuable now, but soon they will not be. There is no point in storing events that will soon be useless. For this type of event, a volatile messaging system yields the best performance with the lowest possible latency as writing to the disk is skipped. In this type of scenario, the messaging system is aware of consumers and disseminates events to all consumers who are online at the time of publication. When consumers disconnect from the system, the messaging system forgets about them. This type of system is vital for its ability to handle a large number of dynamic clients that have low-latency interaction needs, such as Internet-of-Things (IoT) devices.&lt;/p&gt; &lt;h3&gt;Durable&lt;/h3&gt; &lt;p&gt;This more traditional type of message system knows about registered consumers and stores messages durably until every registered consumer has read them. This type of system works well for scenarios where the consumer might be disconnected when the event is published. The system holds on to the messages until every consumer has re-connected and consumed the relevant events. Once an event has been fully consumed, the message broker discards the messages. The goal is to offer reliable messaging among services with strong ordering and delivery guarantees.&lt;/p&gt; &lt;h3&gt;Replayable&lt;/h3&gt; &lt;p&gt;Here, the messaging system is not aware of consumers or event registrations. It merely stores events and publishes them to a stream for a given period, or until capacity is reached. In this type of system, an existing or new consumer can join at any time, connect and consume events, and even replay the stream from the beginning. Consumers can move back and forth in the stream as required. The driving force for this type of messaging system is scalability, combined with the ability to replay messages.&lt;/p&gt; &lt;h2&gt;Message semantics&lt;/h2&gt; &lt;p&gt;Apart from the technical characteristics of messages, it is essential to distinguish the language that we use—i.e., the semantic aspects—and the intent of the interactions. Some messages are targeted for a specific consumer and demand concrete actions. Some query the latest state of a system without requiring a state change, and some notify the world about a change that has happened in the source system. From a messaging-semantics perspective, there are three message types, as described in Figure 2.&lt;/p&gt; &lt;div id="attachment_732407" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics.png"&gt;&lt;img aria-describedby="caption-attachment-732407" class=" size-large wp-image-732407 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics-1024x339.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics-1024x339.png" alt="A graphic showing three message types based on semantics: Command, query, and event." width="640" height="212" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics-1024x339.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics-300x99.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/message_semantics-768x254.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-732407" class="wp-caption-text"&gt;Figure 2: Understanding message types based on semantics.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s consider each of these message types.&lt;/p&gt; &lt;h3&gt;Command&lt;/h3&gt; &lt;p&gt;A &lt;i&gt;command&lt;/i&gt; is a request for action that usually leads to a state change on a known target system. Typically, a response indicates that the action was completed, and there might even be a result associated with the response. When a response is expected, commands are typically implemented over synchronous protocols such as HTTP. It is also possible to apply request-and-response or fire-and-forget command styles over asynchronous messaging systems. Command-based asynchronous messages require coupling between the source system and the target system, in the form of command semantics.&lt;/p&gt; &lt;h3&gt;Query&lt;/h3&gt; &lt;p&gt;A &lt;i&gt;query&lt;/i&gt; is like a command, but it is a read-only interaction that does not lead to a state change. By nature, a query expects a response. It is common to see synchronous implementations of this message type, but asynchronous and non-blocking implementations over messaging systems are also typical. Even fire-and-forget interactions for long-running operations, where a response is written to a different location, are not unusual.&lt;/p&gt; &lt;h3&gt;Event&lt;/h3&gt; &lt;p&gt;An &lt;i&gt;event&lt;/i&gt; is a notification that something has changed. A system sends event notifications to notify other systems of a change in its domain. An event is different from a command in that often the event-emitting system doesn&amp;#8217;t expect a response. In addition to being asynchronous, event messages are not targeted to a specific recipient, which makes further decoupling possible. Similar to other asynchronous interactions, events are implemented as messages on queues, which are often called &lt;i&gt;streams&lt;/i&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See Martin Fowler&amp;#8217;s presentation, &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=STKCRSUsyP0"&gt;The many meanings of event-driven architecture&lt;/a&gt;,&amp;#8221; for in-depth coverage of the different types of events in a messaging system.&lt;/p&gt; &lt;h2&gt;Choosing a messaging system&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Law_of_the_instrument"&gt;&lt;i&gt;Law of the instrument&lt;/i&gt;&lt;/a&gt; approach defined by Abraham Maslow says, &amp;#8220;If the only tool you have is a hammer, treat everything as if it were a nail.&amp;#8221; Following that approach, you could certainly use a classic message broker such as &lt;a target="_blank" rel="nofollow" href="https://activemq.apache.org/components/artemis/"&gt;Apache ActiveMQ Artemis&lt;/a&gt; to implement the different interaction styles described in this article. The technology is familiar to many, which would make it easy to use from the start. On the other hand, it would be challenging to develop use cases such as replayable messaging with a classic message broker.&lt;/p&gt; &lt;p&gt;On the other end of the extreme, you could try using something like &lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt; for every messaging scenario. Kafka would require a more substantial amount of hardware resources and human effort to manage, but use cases requiring replayable messaging or extreme scalability would be covered.&lt;/p&gt; &lt;p&gt;While both of the above approaches are fine in some cases, when you have a large number of services with different messaging needs, using the right tool for the right job is a better option. Mapping the previously described messaging patterns is a useful tool for deciding what messaging infrastructure you need. In Figure 3, I have mapped the characteristics of three different types of message broker system to the different messaging scenarios and types of messages we&amp;#8217;ve discussed.&lt;/p&gt; &lt;div id="attachment_734297" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1.png"&gt;&lt;img aria-describedby="caption-attachment-734297" class=" size-large wp-image-734297 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1-1024x335.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1-1024x335.png" alt="A chart for comparing messaging systems based business needs and message semantics." width="640" height="209" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1-1024x335.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1-300x98.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/messaging_infrastructures-1-768x251.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-734297" class="wp-caption-text"&gt;Figure 3: Mapping messaging characteristics to messaging infrastructures.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Each of the three frameworks in Figure 3 is effective for a different type of messaging scenario and need. As I mentioned at the beginning of this article, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/amq"&gt;Red Hat AMQ&lt;/a&gt; packages all three of them—Apache Qpid, Apache ActiveMQ Artemis, and Apache Kafka—so that you can choose the right tool for the right job.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;There are many aspects to consider when choosing the right event-messaging infrastructure for your needs. I hope that the considerations and the mapping tool presented in this article will help you get one step closer to deciding.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#38;linkname=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F31%2Fchoosing-the-right-asynchronous-messaging-infrastructure-for-the-job%2F&amp;#038;title=Choosing%20the%20right%20asynchronous-messaging%20infrastructure%20for%20the%20job" data-a2a-url="https://developers.redhat.com/blog/2020/07/31/choosing-the-right-asynchronous-messaging-infrastructure-for-the-job/" data-a2a-title="Choosing the right asynchronous-messaging infrastructure for the job"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/07/31/choosing-the-right-asynchronous-messaging-infrastructure-for-the-job/"&gt;Choosing the right asynchronous-messaging infrastructure for the job&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HrNVtP7wbRg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The term asynchronous means &amp;#8220;not occurring at the same time.&amp;#8221; In the context of distributed systems and messaging, this term implies that request processing will occur at an arbitrary point in time. Asynchronous interactions hold many advantages over synchronous ones, but they also introduce new challenges. In this article, we will focus on specific considerations [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/07/31/choosing-the-right-asynchronous-messaging-infrastructure-for-the-job/"&gt;Choosing the right asynchronous-messaging infrastructure for the job&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">732387</post-id><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-07-31T07:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/07/31/choosing-the-right-asynchronous-messaging-infrastructure-for-the-job/</feedburner:origLink></entry><entry><title>How to fix .NET Core’s ‘Unable to obtain lock file access’ error on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DzipgvGkzFE/" /><category term=".NET" /><category term="C#" /><category term="Containers" /><category term="Kubernetes" /><category term=".NET Core" /><category term=".NET Core error" /><category term="C# error" /><category term="dotnet run" /><category term="openshift" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=731737</id><updated>2020-07-30T07:00:39Z</updated><published>2020-07-30T07:00:39Z</published><content type="html">&lt;p&gt;Well, it finally happened. Despite the added assurances of working with &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;, the old &amp;#8220;It works on my machine&amp;#8221; scenario reared its ugly head in my &lt;a href="https://developers.redhat.com/products/dotnet/overview"&gt;.NET Core&lt;/a&gt; (C#) code. The image that I created worked fine on my local PC—a Fedora 32 machine—but it crashed when I tried running it in my &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt; cluster.&lt;/p&gt; &lt;p&gt;The error was &amp;#8220;Unable to obtain lock file access on /tmp/NuGetScratch.&amp;#8221; Let&amp;#8217;s take a quick look at what happened, and then I&amp;#8217;ll explain how I fixed it.&lt;/p&gt; &lt;h2&gt;Identity issues&lt;/h2&gt; &lt;p&gt;After a lot of web searching and a discussion with a Red Hat .NET Core engineer, I discovered the underlying problem. It turns out that within a container, the identity used to initially run the program (using the &lt;code&gt;dotnet run&lt;/code&gt; command) must be the same for subsequent users.&lt;/p&gt; &lt;p&gt;The problem might be easy to understand, but what&amp;#8217;s the solution?&lt;/p&gt; &lt;p&gt;&lt;span id="more-731737"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A temporary problem&lt;/h2&gt; &lt;p&gt;The solution was not only simple, but it was the right way to do things. Consider the initial Dockerfile that I used to build the image:&lt;/p&gt; &lt;pre&gt;FROM registry.access.redhat.com/ubi8/dotnet-31:3.1 USER 1001 RUN mkdir qotd-csharp WORKDIR qotd-csharp ADD . . RUN dotnet publish -c Release EXPOSE 10000 CMD ["dotnet", "run", "/bin/Release/netcoreapp3.1/publish/qotd-csharp.dll"] &lt;/pre&gt; &lt;p&gt;Notice the last line, which is the command that is called when you run the image:&lt;/p&gt; &lt;pre&gt;CMD ["dotnet", "run", "./bin/Release/netcoreapp3.0/publish/qotd-csharp.dll"] &lt;/pre&gt; &lt;p&gt;Because I was using &lt;code&gt;dotnet run&lt;/code&gt;, the .NET Core framework was attempting to access the temporary directory &lt;code&gt;/tmp/NuGetScratch&lt;/code&gt;. Because the user that built the image and the user attempting to run it were not the same, it failed inside of the Kubernetes cluster. The .NET runtime did not have permission to access this directory.&lt;/p&gt; &lt;h2&gt;Update the Dockerfile (hint: don&amp;#8217;t run)&lt;/h2&gt; &lt;p&gt;The solution was simple: I just used the following Dockerfile. Once again, notice the final line:&lt;/p&gt; &lt;pre&gt;FROM registry.access.redhat.com/ubi8/dotnet-31:3.1 USER 1001 RUN mkdir qotd-csharp WORKDIR qotd-csharp ADD . . RUN dotnet publish -c Release EXPOSE 10000 CMD ["dotnet", "./bin/Release/netcoreapp3.0/publish/qotd-csharp.dll"] &lt;/pre&gt; &lt;p&gt;The updated file not only worked, but it worked better.&lt;/p&gt; &lt;p&gt;Because the library (&lt;code&gt;qotd-csharp.dll&lt;/code&gt;) is already built, there&amp;#8217;s no need to use the &lt;code&gt;dotnet run&lt;/code&gt; command when a simple &lt;code&gt;dotnet &amp;#60;path-to-dll&amp;#62;&lt;/code&gt; is correct. As an added benefit, &lt;em&gt;it starts hundreds of times faster&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Even working with containerized applications on Kubernetes, the &amp;#8220;it works on my machine&amp;#8221; problem can still arise from time to time, especially in scenarios involving permissions. In this instance, not only did a workaround exist, but it was the right way to run the image. Chalk this up to a PEBKAC error—that is, a problem that exists between the keyboard and the chair. I learned my lesson.&lt;/p&gt; &lt;p&gt;You can read more in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/solutions/5142731"&gt;Red Hat Knowledgebase article&lt;/a&gt; for this error.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F07%2F30%2Fhow-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift%2F&amp;#038;title=How%20to%20fix%20.NET%20Core%E2%80%99s%20%E2%80%98Unable%20to%20obtain%20lock%20file%20access%E2%80%99%20error%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/07/30/how-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift/" data-a2a-title="How to fix .NET Core’s ‘Unable to obtain lock file access’ error on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/07/30/how-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift/"&gt;How to fix .NET Core&amp;#8217;s &amp;#8216;Unable to obtain lock file access&amp;#8217; error on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DzipgvGkzFE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Well, it finally happened. Despite the added assurances of working with containers and Kubernetes, the old &amp;#8220;It works on my machine&amp;#8221; scenario reared its ugly head in my .NET Core (C#) code. The image that I created worked fine on my local PC—a Fedora 32 machine—but it crashed when I tried running it in my [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/07/30/how-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift/"&gt;How to fix .NET Core&amp;#8217;s &amp;#8216;Unable to obtain lock file access&amp;#8217; error on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">731737</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2020-07-30T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/07/30/how-to-fix-net-cores-unable-to-obtain-lock-file-access-error-on-red-hat-openshift/</feedburner:origLink></entry></feed>
